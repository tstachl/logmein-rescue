{
  "name": "LogMeIn::Rescue",
  "tagline": "LogMeIn Rescue API client",
  "body": "# LogMeIn::Rescue\r\n\r\n## Getting Started\r\n\r\nThe LogMeIn Rescue API provides an interface to third parties for communicating with an application. Use this API to customize how Rescue integrates with your other support applications.\r\n\r\n### Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'logmein-rescue'\r\n```\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install logmein-rescue\r\n\r\n## Usage\r\n\r\n### Authentication\r\n\r\nThe LogMeIn API supports two forms of authentication. When authenticating it defaults to `:auth_code` so in case you want to store session cookies please make sure you set the type when you call the `login` method.\r\n\r\n#### Login\r\n\r\nThe `login` method will create a session cookie. This cookie will expire after 20 minutes of inactivity.\r\n\r\n```ruby\r\n# Authenticate\r\nclient = LogMeIn::Rescue.login(email, password, type: :cookie)\r\ncookie = client.cookie\r\n\r\n# Reuse the Cookie\r\nclient = LogMeIn::Rescue.cookie(cookie)\r\n```\r\n\r\n#### Auth code\r\n\r\nIf your application can't work with session cookies you can also create a non-expiring auth code.\r\n\r\n```ruby\r\n# Authenticate\r\nclient = LogMeIn::Rescue.login(email, password)\r\ncode   = client.auth_code\r\n\r\n# Reuse the auth code\r\nclient = LogMeIn::Rescue.auth_code(code)\r\n```\r\n\r\n### Account Information\r\n\r\nThese methods provide basic information on an account and allow the user to log in and out of an account.\r\n\r\n#### `login`\r\n*Not Implemented.*\r\n\r\n#### `logout`\r\n*Not Implemented.*\r\n\r\n#### `account`\r\n*Not Implemented.*\r\n\r\n#### `hierarchy`\r\n*Not Implemented.*\r\n\r\n#### `hierarchy_v2`\r\n*Not Implemented.*\r\n\r\n### Account Management\r\n\r\nWith the account management methods, you can create new Rescue users and groups, and assign Rescue users to channels.\r\n\r\nNote: The `auth_code` parameter enables you to use these methods without logging in to Rescue.\r\n\r\n#### `create_user`\r\n*Not Implemented.*\r\n\r\n#### `create_users`\r\n*Not Implemented.*\r\n\r\n#### `get_user`\r\n*Not Implemented.*\r\n\r\n#### `set_user`\r\n*Not Implemented.*\r\n\r\n#### `set_user_status`\r\n*Not Implemented.*\r\n\r\n#### `create_group`\r\n*Not Implemented.*\r\n\r\n#### `get_group`\r\n*Not Implemented.*\r\n\r\n#### `set_group`\r\n*Not Implemented.*\r\n\r\n#### `move_node`\r\n*Not Implemented.*\r\n\r\n#### `delete_node`\r\n*Not Implemented.*\r\n\r\n#### `assign_channel`\r\n*Not Implemented.*\r\n\r\n#### `unassign_channel`\r\n*Not Implemented.*\r\n\r\n### Supporting CRM Systems\r\n\r\nThese methods enable you to integrate Rescue into your existing CRM system.\r\n\r\n#### `generate_email_text`\r\n*Not Implemented.*\r\n\r\n#### `get_login_ticket`\r\n*Not Implemented.*\r\n\r\n#### `get_dtc_login_ticket`\r\n*Not Implemented.*\r\n\r\n#### `request_auth_code`\r\n*Not Implemented.*\r\n\r\n#### `request_auth_code_sso`\r\n*Not Implemented.*\r\n\r\n#### `request_pin_code`\r\n*Not Implemented.*\r\n\r\n#### `request_lens_pin_code`\r\n*Not Implemented.*\r\n\r\n### Session Management\r\n\r\nThese methods enable you to manage technician sessions.\r\n\r\nNote: The `auth_code` parameter enables you to use these methods without logging in to Rescue.\r\n\r\n#### `get_session`\r\n*Not Implemented.*\r\n\r\n#### `start_session`\r\n*Not Implemented.*\r\n\r\n#### `hold_session`\r\n*Not Implemented.*\r\n\r\n#### `transfer_session`\r\n*Not Implemented.*\r\n\r\n#### `close_session`\r\n*Not Implemented.*\r\n\r\n#### `cancel_action`\r\n*Not Implemented.*\r\n\r\n#### `is_any_tech_available_on_channel`\r\n*Not Implemented.*\r\n\r\n### Reporting\r\n\r\nThese methods retrieve information for generating reports.\r\n\r\nYou can specify what information you need and how to display that information in your reports.\r\n\r\n**Important:** Although the `auth_code` parameter is available for all reporting methods, you cannot generate reports without logging in to Rescue.\r\n\r\n#### `get_chat`\r\n*Not Implemented.*\r\n\r\n#### `get_note`\r\n*Not Implemented.*\r\n\r\n#### `get_report`\r\n*Not Implemented.*\r\n\r\n#### `get_report_area`\r\n*Not Implemented.*\r\n\r\n#### `set_report_area`\r\n*Not Implemented.*\r\n\r\n#### `get_date_format`\r\n*Not Implemented.*\r\n\r\n#### `set_date_format`\r\n*Not Implemented.*\r\n\r\n#### `get_delimiter`\r\n*Not Implemented.*\r\n\r\n#### `set_delimiter`\r\n*Not Implemented.*\r\n\r\n#### `get_output`\r\n*Not Implemented.*\r\n\r\n#### `set_output`\r\n*Not Implemented.*\r\n\r\n#### `get_report_date`\r\n*Not Implemented.*\r\n\r\n#### `set_report_date`\r\n*Not Implemented.*\r\n\r\n#### `get_report_time`\r\n*Not Implemented.*\r\n\r\n#### `set_report_time`\r\n*Not Implemented.*\r\n\r\n#### `get_time_zone`\r\n*Not Implemented.*\r\n\r\n#### `set_time_zone`\r\n*Not Implemented.*\r\n\r\n## Development\r\n\r\nAfter checking out the repo, run `bin/setup` to install dependencies. Then, run `rake test` to run the tests. You can also run `bin/console` for an interactive prompt that will allow you to experiment.\r\n\r\nTo install this gem onto your local machine, run `bundle exec rake install`. To release a new version, update the version number in `version.rb`, and then run `bundle exec rake release`, which will create a git tag for the version, push git commits and tags, and push the `.gem` file to [rubygems.org](https://rubygems.org).\r\n\r\n## Contributing\r\n\r\nBug reports and pull requests are welcome on GitHub at https://github.com/tstachl/logmein-rescue. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the [Contributor Covenant](http://contributor-covenant.org) code of conduct.\r\n\r\n## License\r\n\r\nThe gem is available as open source under the terms of the [BSD 3-Clause License](https://opensource.org/licenses/BSD-3-Clause).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}